name: Approve Guard (labels)

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, reopened, ready_for_review]

jobs:
  guard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
    steps:
      - name: Check label-based approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            core.info(`Repo: ${owner}/${repo}, PR: ${prNumber}`);

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            const author = (pr.user.login || '').toLowerCase();
            core.info(`Author: ${author}`);

            const teamSize = parseInt(process.env.TEAM_SIZE || '0', 10);
            if (!teamSize) { core.setFailed('TEAM_SIZE is not set'); return; }
            const required = Math.max(0, teamSize - 1);
            core.info(`Required approvals: ${required}`);

            const events = await github.paginate(github.rest.issues.listEvents, {
              owner, repo, issue_number: prNumber, per_page: 100
            });

            core.info(`Events: ${events.length}`);
            const addedBy = events
              .filter(e => e.event === 'labeled' && e.label && e.label.name)
              .map(e => ({
                actor: (e.actor?.login || '').toLowerCase().trim(),
                label: (e.label.name      || '').toLowerCase().trim(),
                at: e.created_at
              }));

            core.info('Label adds:');
            for (const e of addedBy) core.info(`  ${e.actor} -> ${e.label} @ ${e.at}`);

            const approvers = new Set(
              addedBy
                .filter(x => x.label.startsWith('approved-by-'))
                .filter(x => x.label.replace(/^approved-by-/, '') === x.actor) 
                .filter(x => x.actor !== author)                 
                .map(x => x.actor)
            );

            core.info(`Approvers via labels: ${Array.from(approvers).join(', ') || 'none'}`);
            core.info(`Count: ${approvers.size} / Required: ${required}`);

            if (approvers.size < required) {
              core.setFailed(`Need at least ${required} valid label-approvals (format: approved-by-<username>, added by that same user; author excluded).`);
            } else {
              core.notice('OK: enough label-approvals');
            }
        env:
          TEAM_SIZE: ${{ vars.TEAM_SIZE }}